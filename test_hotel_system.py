# -*- coding: utf-8 -*-
"""test_hotel_system

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LnPCWRTAYBLVCHK1tlrxJ2IRE-3Kvrhs
"""

# test_hotel_system.py
from hotel_system import Guest, Room, Booking, ServiceRequest, Feedback
from datetime import datetime

rooms = [
    Room("101", "Single", 150),
    Room("102", "Double", 250),
    Room("103", "Suite", 400)
]

def show_available_rooms(room_list):
    print("\n--- Available Rooms ---")
    for room in room_list:
        if room.is_available():
            print("Room Number:", room._room_number, "| Type:", room._room_type, "| Price per night:", room._price_per_night)

if __name__ == "__main__":
    try:
        # Guest information input
        guest_name = input("Enter guest name: ")
        guest_contact = input("Enter guest contact info: ")
        loyalty_status = input("Enter loyalty status (Gold/Silver/None): ").capitalize()
        if loyalty_status not in ["Gold", "Silver", "None"]:
            raise ValueError("Loyalty status must be Gold, Silver, or None.")

        guest = Guest(1, guest_name, guest_contact, loyalty_status)

        # Show available rooms
        show_available_rooms(rooms)
        selected_room_number = input("Enter desired room number: ")
        selected_room = next((r for r in rooms if r._room_number == selected_room_number and r.is_available()), None)
        if not selected_room:
            raise ValueError("Selected room is unavailable or invalid.")

        # Date input and inline date validation
        check_in = input("Enter check-in date (YYYY-MM-DD): ")
        check_out = input("Enter check-out date (YYYY-MM-DD): ")
        if datetime.strptime(check_out, "%Y-%m-%d") <= datetime.strptime(check_in, "%Y-%m-%d"):
            raise ValueError("Check-out date must be after check-in date.")
        num_days = (datetime.strptime(check_out, "%Y-%m-%d") -
                    datetime.strptime(check_in, "%Y-%m-%d")).days

        # Create booking and update room availability
        booking = Booking(1, guest, selected_room, check_in, check_out)
        guest.add_booking(booking)
        selected_room.set_availability(False)

        # Service request input
        service_type = input("Request a service (Housekeeping/Transportation/None): ")
        service_request = ServiceRequest(1, guest, service_type)
        guest.add_service_request(service_request)
        service_charge = 0 if service_type.lower() == "none" else 50

        # Create invoice
        charges = {
            "Room Charges": selected_room._price_per_night * num_days,
            "Service": service_charge
        }
        booking.create_invoice(1, charges, 1, "Credit Card")

        invoice = booking.get_invoice()
        payment = invoice.get_payment()
        payment.process_payment()

        # Feedback input
        rating = int(input("Rate your stay (1-5): "))
        if rating < 1 or rating > 5:
            raise ValueError("Rating must be between 1 and 5.")
        comments = input("Enter feedback comments: ")
        feedback = Feedback(1, guest, rating, comments)
        guest.add_feedback(feedback)

        # Determine amenities based on loyalty status
        if guest.get_loyalty_status() == "Silver":
            amenities = "TV, WiFi, Mini Bar"
        elif guest.get_loyalty_status() == "Gold":
            amenities = "TV, WiFi, Mini Bar, Special View"
        else:
            amenities = "Standard Amenities"

        # Display booking summary and feedback
        print("\n--- Booking Summary ---")
        print("Guest Name:", guest.get_name())
        print("Loyalty Status:", guest.get_loyalty_status())
        print("Loyalty Points Earned:", guest.get_loyalty_points(), "points")
        print("Amenities:", amenities)
        print("Room Number:", selected_room._room_number)
        print("Check-in Date:", check_in)
        print("Check-out Date:", check_out)
        print("Number of Nights:", num_days)
        print("Total Invoice Amount: $", invoice.get_total_amount())
        print("Payment Method:", payment._payment_method)
        print("Payment Status:", "Paid" if payment.is_paid() else "Unpaid")
        print("Service Charges: $", service_charge)

        print("\n--- Guest Feedback ---")
        print("Rating:", rating, "/5")
        print("Comments:", comments)

    except ValueError as ve:
        print("Input error:", ve)
    except Exception as e:
        print("Unexpected error:", e)