# -*- coding: utf-8 -*-
"""hotel_system

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_VtNGNK8gWGEwwRP2NV9Bg4lnXRkth_D
"""

# hotel_system.py
from datetime import datetime

class User:
    """Represents any user of the system."""
    def __init__(self, user_id, name, contact_info):
        self._user_id = user_id
        self._name = name
        self._contact_info = contact_info

    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def get_contact_info(self):
        return self._contact_info

    def set_contact_info(self, info):
        self._contact_info = info


class LoyaltyRewards:
    """Manages loyalty rewards for guests."""
    def __init__(self, guest):
        self._guest = guest
        self._points = 0

    def add_points(self, points):
        self._points += points

    def get_points(self):
        return self._points


class Guest(User):
    """Handles guest-specific information and actions."""
    def __init__(self, guest_id, name, contact_info, loyalty_status):
        super().__init__(guest_id, name, contact_info)
        self._loyalty_status = loyalty_status
        self._bookings = []
        self._feedbacks = []
        self._service_requests = []
        self._loyalty_rewards = LoyaltyRewards(self)

    def get_loyalty_status(self):
        return self._loyalty_status

    def set_loyalty_status(self, status):
        self._loyalty_status = status

    def add_booking(self, booking):
        self._bookings.append(booking)
        # Calculate number of nights from check-in and check-out dates
        nights = (datetime.strptime(booking._check_out, "%Y-%m-%d") -
                  datetime.strptime(booking._check_in, "%Y-%m-%d")).days
        # Example: Award 10 points per night stayed
        self._loyalty_rewards.add_points(nights * 10)

    def add_feedback(self, feedback):
        self._feedbacks.append(feedback)

    def add_service_request(self, request):
        self._service_requests.append(request)

    def get_loyalty_points(self):
        return self._loyalty_rewards.get_points()


class Room:
    """Manages room details."""
    def __init__(self, room_number, room_type, price_per_night):
        self._room_number = room_number
        self._room_type = room_type
        self._price_per_night = price_per_night
        self._availability_status = True

    def is_available(self):
        return self._availability_status

    def set_availability(self, status):
        self._availability_status = status


class Booking:
    """Manages the booking process."""
    def __init__(self, booking_id, guest, room, check_in, check_out):
        # We assume date validation has been done prior to creating a booking.
        self._booking_id = booking_id
        self._guest = guest
        self._room = room
        self._check_in = check_in
        self._check_out = check_out
        self._invoice = None

    def create_invoice(self, invoice_id, charges, payment_id, payment_method):
        self._invoice = Invoice(invoice_id, charges, payment_id, payment_method)

    def get_invoice(self):
        return self._invoice


class Invoice:
    """Handles invoicing and payments."""
    def __init__(self, invoice_id, charges, payment_id, payment_method):
        self._invoice_id = invoice_id
        self._charges = charges
        self._total_amount = sum(charges.values())
        self._payment = Payment(payment_id, self._total_amount, payment_method)

    def get_total_amount(self):
        return self._total_amount

    def get_payment(self):
        return self._payment


class Payment:
    """Processes payments for bookings."""
    def __init__(self, payment_id, amount, payment_method):
        self._payment_id = payment_id
        self._amount = amount
        self._payment_method = payment_method
        self._is_paid = False

    def process_payment(self):
        self._is_paid = True

    def is_paid(self):
        return self._is_paid


class ServiceRequest:
    """Tracks service requests from guests."""
    def __init__(self, request_id, guest, service_type):
        self._request_id = request_id
        self._guest = guest
        self._service_type = service_type
        self._status = "Pending"

    def set_status(self, status):
        self._status = status


class Feedback:
    """Collects and stores feedback from guests."""
    def __init__(self, feedback_id, guest, rating, comments):
        self._feedback_id = feedback_id
        self._guest = guest
        self._rating = rating
        self._comments = comments